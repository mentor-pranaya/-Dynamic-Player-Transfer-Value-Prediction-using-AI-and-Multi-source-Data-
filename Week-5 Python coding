import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error, mean_absolute_error
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout

# 1. Load & Prepare Data

# Example: synthetic player transfer values (replace with your dataset)
dates = pd.date_range(start="2015", periods=100, freq="M")
values = np.linspace(5, 50, 100) + np.random.normal(0, 2, 100)
data = pd.DataFrame({"date": dates, "transfer_value": values})

# Scale values
scaler = MinMaxScaler()
scaled_values = scaler.fit_transform(data[["transfer_value"]])

# Create sequences
def create_sequences(series, time_steps=10):
    X, y = [], []
    for i in range(len(series)-time_steps):
        X.append(series[i:(i+time_steps), 0])
        y.append(series[i+time_steps, 0])
    return np.array(X), np.array(y)

time_steps = 10
X, y = create_sequences(scaled_values, time_steps)
X = X.reshape((X.shape[0], X.shape[1], 1))

# Train-test split
train_size = int(0.8 * len(X))
X_train, X_test = X[:train_size], X[train_size:]
y_train, y_test = y[:train_size], y[train_size:]


# 2. Build LSTM Model

model = Sequential([
    LSTM(64, activation="relu", input_shape=(time_steps, 1), return_sequences=True),
    Dropout(0.2),
    LSTM(32, activation="relu"),
    Dense(1)
])

model.compile(optimizer="adam", loss="mse")
history = model.fit(X_train, y_train, epochs=50, batch_size=16, validation_split=0.1, verbose=1)

# 3. Evaluate Model

predictions = model.predict(X_test)
predictions = scaler.inverse_transform(predictions)
actual = scaler.inverse_transform(y_test.reshape(-1, 1))

rmse = np.sqrt(mean_squared_error(actual, predictions))
mae = mean_absolute_error(actual, predictions)

print("RMSE:", rmse)
print("MAE:", mae)

# 4. Visualize Result

plt.figure(figsize=(10,5))
plt.plot(actual, label="Actual Values")
plt.plot(predictions, label="Predicted Values")
plt.legend()
plt.title("Player Transfer Value Prediction (Univariate LSTM)")
plt.show()

# Plot training loss
plt.plot(history.history["loss"], label="Train Loss")
plt.plot(history.history["val_loss"], label="Validation Loss")
plt.legend()
plt.title("Training Loss Curve")
plt.show()
