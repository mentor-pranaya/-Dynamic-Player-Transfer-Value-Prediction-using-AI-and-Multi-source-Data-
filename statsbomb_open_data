import pandas as pd
from statsbombpy import sb
import os
import time
import matplotlib.pyplot as plt
import seaborn as sns


events_folder = "data/world_cup_events"
if not os.path.exists(events_folder):
    os.makedirs(events_folder)


world_cup_matches = pd.DataFrame(sb.matches(competition_id=43, season_id=106))
print(f"Found {len(world_cup_matches)} matches for the competition.")


for index, row in world_cup_matches.iterrows():
    match_id = row['match_id']
    file_path = f"{events_folder}/match_{match_id}_events.csv"

    
    if not os.path.exists(file_path):
        print(f"Fetching event data for match_id: {match_id}...")
        try:
            events = pd.DataFrame(sb.events(match_id=match_id))
            events.to_csv(file_path, index=False)
            print(f"   -> Saved data to {file_path}")
        except Exception as e:
            print(f"   -> Could not fetch data for match {match_id}. Error: {e}")
        time.sleep(1)
    else:
        print(f"Skipping match_id: {match_id} (file already exists).")

print("\nProcess complete. All available event data has been downloaded.")


print("\n--- Starting EDA on the first match ---")


first_match_id = world_cup_matches.loc[0, "match_id"]
first_match_file = f"{events_folder}/match_{first_match_id}_events.csv"


events = pd.read_csv(first_match_file)


print("\nEvents Data Info:")
events.info()


print("\nMissing values in each column:")
print(events.isnull().sum())


event_counts = events["type"].value_counts()
print("\nEvent Type Counts:")
print(event_counts.head())


plt.figure(figsize=(10, 5))
sns.barplot(x=event_counts.index[:10], y=event_counts.values[:10])
plt.title(f"Top 10 Event Types in Match {first_match_id}")
plt.ylabel("Count")
plt.xticks(rotation=45)
plt.show()


shots = events[events["type"] == "Shot"]
print("\nShots Data Sample (Player, Team, Outcome):")
print(shots[["player", "team", "shot_outcome"]].head())


shots_per_player = shots["player"].value_counts().head(10)


plt.figure(figsize=(8, 5))
sns.barplot(x=shots_per_player.index, y=shots_per_player.values)
plt.title(f"Top 10 Players by Shots in Match {first_match_id}")
plt.ylabel("Shots")
plt.xticks(rotation=45)
plt.show()



# extra code

import pandas as pd
import os
import json
from glob import glob

BASE_PATH = r"/Users/nishantgupta/Desktop/Internship Project/StatsBomb open data/data"
PROCESSED_DATA_FOLDER = r"/Users/nishantgupta/Desktop/Internship Project"
PLAYER_SUMMARY_FILE = os.path.join(PROCESSED_DATA_FOLDER, "complete_statsbomb_data.csv")


PATH_LINEUPS = os.path.join(BASE_PATH, "lineups")


if not os.path.exists(PLAYER_SUMMARY_FILE):
    print(f"Error: The file '{PLAYER_SUMMARY_FILE}' was not found.")
    print("Please make sure you have run the main processing script first.")
    exit()


print("Processing lineup files to create a player name-to-ID map...")
player_name_to_id_map = {}
for file in glob(os.path.join(PATH_LINEUPS, "*.json")):
    with open(file, "r", encoding="utf-8") as f:
        lineups_data = json.load(f)
        for team in lineups_data:
            for player in team["lineup"]:
                player_id = player.get("player_id")
                player_name = player.get("player_name")
                # Store the mapping, it will handle duplicates automatically
                if player_id and player_name:
                    player_name_to_id_map[player_name] = player_id

print(f"Created a map for {len(player_name_to_id_map)} unique player names.")

print(f"Loading data from '{PLAYER_SUMMARY_FILE}'...")
df = pd.read_csv(PLAYER_SUMMARY_FILE)


df['player_id'] = df['player_name'].map(player_name_to_id_map)


cols = ['player_id'] + [col for col in df.columns if col != 'player_id']
df = df[cols]


df.to_csv(PLAYER_SUMMARY_FILE, index=False)

print("\n" + "="*50)
print(f"Successfully updated '{PLAYER_SUMMARY_FILE}' with a 'player_id' column.")
print("="*50)
print("\n--- Updated Data Preview ---")
print(df.head())


#Data Cleaning and feature engineering

import pandas as pd
import numpy as np

def clean_and_engineer_features(input_file):
    try:
        print(f"Reading data from '{input_file}'...")
        df = pd.read_csv(input_file)
    except FileNotFoundError:
        print(f"Error: The file '{input_file}' was not found.")
        return


    print("\n--- Starting Data Cleaning ---")
    numeric_cols = ['goals', 'assists', 'shots', 'total_xG', 'matches_played']
    for col in numeric_cols:
        df[col] = df[col].fillna(0)
    print("Handled missing values by filling with 0.")

    df['player_id'] = df['player_id'].astype(int)
    for col in numeric_cols:
        df[col] = pd.to_numeric(df[col])
    print("Corrected data types for key columns.")

    # --- 2. BASIC FEATURE ENGINEERING ---
    print("\n--- Starting Basic Feature Engineering ---")
    df['goals_per_match'] = np.divide(df['goals'], df['matches_played'])
    df['assists_per_match'] = np.divide(df['assists'], df['matches_played'])
    df['shots_per_match'] = np.divide(df['shots'], df['matches_played'])
    df['xG_per_match'] = np.divide(df['total_xG'], df['matches_played'])
    

    df['goal_conversion_rate'] = np.divide(df['goals'], df['shots'])
    
 
    df['xG_performance'] = df['goals'] - df['total_xG']


    df.fillna(0, inplace=True)
    print("Created new features: per-match stats, conversion rate, and xG performance.")

    # --- 3. ADVANCED FEATURE ENGINEERING (PERFORMANCE TRENDS) ---
    print("\n--- Starting Advanced Feature Engineering ---")


    df_sorted = df.sort_values(by=['player_name', 'season_name'])

  
    shifted_cols = {}
    for col in ['goals', 'assists', 'shots', 'total_xG', 'matches_played']:
        shifted_cols[f'prev_season_{col}'] = df_sorted.groupby('player_name')[col].shift(1)
    
    df_trends = pd.concat([df_sorted, pd.DataFrame(shifted_cols)], axis=1)


    df_trends['goals_yoy_change'] = df_trends['goals'] - df_trends['prev_season_goals']
    df_trends['assists_yoy_change'] = df_trends['assists'] - df_trends['prev_season_assists']


    df_trends.fillna(0, inplace=True)
    print("Created new features for year-over-year performance trends.")
    
    # --- 4. SAVE THE FINAL, ENRICHED DATASET ---
    output_file = "player_performance_engineered.csv"
    df_trends.to_csv(output_file, index=False)

    print("\n" + "="*50)
    print(f"Data cleaning and feature engineering complete.")
    print(f"Final dataset saved to '{output_file}'")
    print("="*50)
    
    print("\n--- Final Data Preview (with new features) ---")
    print(df_trends.head())


if __name__ == "__main__":
    statsbomb_summary_file = "/Users/nishantgupta/Desktop/Internship Project/complete_statsbomb_data.csv"
    clean_and_engineer_features(statsbomb_summary_file)
